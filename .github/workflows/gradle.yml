name: Java CI/CD with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash

      - name: Upload Build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar

  deploy:
    name: CD with SSH
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # JAR 파일을 EC2에 배포
      - name: SCP JAR to EC2
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          source: "*.jar"
          target: "/home/ubuntu/app"
          debug: true

      # EC2에서 애플리케이션 실행 시 환경 변수 설정
      - name: Deploy SSH
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            sudo systemctl start redis-server
            sudo fuser -k -n tcp 8080
            sleep 10
             
            # 환경 변수를 사용해 애플리케이션 실행
            sudo nohup java -jar /home/ubuntu/app/*.jar \
              --spring.datasource.url=${{ secrets.RDS_URL }} \
              --spring.datasource.username=${{ secrets.RDS_USERNAME }} \
              --spring.datasource.password=${{ secrets.RDS_PASSWORD }} \
              --cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }} \
              --cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }} \
              --jwt.secret=${{ secrets.JWT_SECRET }} \
              > /home/ubuntu/app/nohup.out 2>&1 &
              
            sudo lsof -i tcp:8080
